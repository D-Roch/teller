GET /        controllers.Dashboard.index
GET /about   controllers.Dashboard.about
GET /api     controllers.Dashboard.api

GET  /organisations              controllers.Organisations.index
POST /organisations             controllers.Organisations.create
GET  /organisation/new         controllers.Organisations.add
GET  /organisation/:id/edit     controllers.Organisations.edit(id: Long)
GET  /organisation/:id           controllers.Organisations.details(id: Long)
POST /organisation/:id         controllers.Organisations.update(id: Long)
POST /organisation/:id/delete   controllers.Organisations.delete(id: Long)
POST /organisation/:id/activation   controllers.Organisations.activation(id: Long)

GET  /people       controllers.People.index

GET  /person/new              controllers.People.add
POST /person/new              controllers.People.create
GET  /person/:id              controllers.People.details(id: Long)
POST /person/:id/activation   controllers.People.activation(id: Long)
POST /person/:id/delete       controllers.People.delete(id: Long)

POST /person/:id/membership                          controllers.People.addMembership(id: Long)
GET  /person/:id/membership/:organisationId/delete   controllers.People.deleteMembership(id: Long, organisationId: Long)

GET  /brands      controllers.Brands.index
POST /brand/new   controllers.Brands.create
GET  /brand/new   controllers.Brands.add
POST /brand/:id/delete   controllers.Brands.delete(id: Long)

GET /api/v1/licensees/:brandCode   controllers.Licenses.licensees(brandCode: String, date: Option[String])

GET     /assets/*file               controllers.Assets.at(path="/public", file)

## SecureSocial
GET      /login                      securesocial.controllers.LoginPage.login
GET      /logout                     securesocial.controllers.LoginPage.logout

# OAuth entry points
GET      /authenticate/:provider     securesocial.controllers.ProviderController.authenticate(provider)
POST     /authenticate/:provider     securesocial.controllers.ProviderController.authenticateByPost(provider)
GET      /not-authorized             securesocial.controllers.ProviderController.notAuthorized
